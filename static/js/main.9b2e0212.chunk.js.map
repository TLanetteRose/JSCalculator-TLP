{"version":3,"sources":["layout/Calculator/Calculator.js","components/Header/Header.js","components/Footer/Footer.js","layout/Calculator/Keypad/KeypadRow/KeypadRow.js","components/LargeButton/LargeButton.js","layout/Calculator/Keypad/Keypad.js","App.js","serviceWorker.js","index.js"],"names":["endsWithOperator","hasOperator","Calculator","props","state","currentVal","prevVal","equation","solved","handleNumbers","bind","initialize","handleOperators","handleDecimal","handleEqual","handleMaxDigits","this","setState","setTimeout","e","currentExp","test","slice","length","newValue","eval","toString","console","log","includes","val","target","value","operate","className","EquationScreen","ResultScreen","currentValue","decimal","equal","init","numbers","oper","React","Component","id","Header","Footer","href","keypadRow","children","largeButton","type","Keypad","KeypadRow","onClick","LargeButton","app","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b2e0212.chunk.js","sourcesContent":["import React from 'react';\nimport Keypad from './Keypad/Keypad';\nimport {Header} from '../../components/Header/Header';\nimport {Footer} from '../../components/Footer/Footer';\n\n\n// Variables:\n// eslint-disable-next-line\nconst endsWithOperator = /[*+-/]$/;\nconst hasOperator = /[*/+-]/;\n\n\n// Components \nclass Calculator extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            currentVal: \"0\",\n            prevVal: \"0\",\n            equation: \"\",\n            solved: false\n        };\n        this.handleNumbers = this.handleNumbers.bind(this);\n        this.initialize = this.initialize.bind(this);\n        this.handleOperators = this.handleOperators.bind(this);\n        this.handleDecimal = this.handleDecimal.bind(this);\n        this.handleEqual = this.handleEqual.bind(this);\n        this.handleMaxDigits = this.handleMaxDigits.bind(this);\n    }\n\n    handleMaxDigits(){\n        this.setState({\n            currentVal: \"Limit Reached\",\n            prevVal: this.state.currentVal\n        })\n        setTimeout(() => this.setState({ currentVal: this.state.prevVal }), 1000);\n    } //HandleMaxDigits\n\n    handleEqual(e){\n        const {currentVal, equation} = this.state\n        let currentExp = equation\n        while(endsWithOperator.test(currentExp)){\n            currentExp = currentExp.slice(0, currentExp.length - 1)\n        }\n        // eslint-disable-next-line\n        let newValue = eval(currentExp)\n        this.setState({\n            currentVal: newValue.toString(),\n            equation: currentExp + \"=\" + newValue, \n            prevVal: newValue,\n            solved: true\n        })\n        console.log(currentVal)\n    } //HandleEqual\n\n    handleNumbers(e){\n        if(!this.state.currentVal.includes(\"Limit\")){\n            const val = e.target.value \n            const {currentVal, equation, solved} = this.state;\n            this.setState({ solved: false });\n            if(currentVal.length > 21){\n                this.handleMaxDigits();\n            }\n            else if(solved){\n                this.setState({\n                    currentVal: val,\n                    equation: val !== \"0\" ? val : \"\"\n                })\n            }\n            else{\n                if(currentVal === \"0\" || hasOperator.test(currentVal)){\n                    this.setState({\n                        currentVal: val,\n                        equation: equation === \"0\" ? val : equation + val\n                    })\n                }\n                else{\n                    this.setState({\n                        currentVal: currentVal + val,\n                        equation: equation === \"0\" ? val: equation + val\n                    })\n                }\n            }\n            console.log(currentVal)\n        }\n    } //HandleNumbers\n\n    handleOperators(e) {\n        if(!this.state.currentVal.includes(\"Limit\")){\n            let {currentVal, equation, solved, prevVal} = this.state;\n            let operate = e.target.value\n            this.setState({ solved: false });\n            if(currentVal === \"0\"){\n                this.setState({\n                    currentVal: operate === \"+\" || operate === \"-\" ? operate : currentVal,\n                    equation: operate === \"+\" || operate === \"-\" ? operate : equation\n                })\n            }\n            else if(solved){\n                this.setState({\n                    equation: prevVal + operate,\n                    currentVal: operate\n                })\n            }\n            else {\n                if(currentVal.length > 21){\n                    this.handleMaxDigits();\n                }\n                else{\n                    if(!endsWithOperator.test(equation) || operate === \"-\"){\n                        this.setState({\n                            prevVal: equation,\n                            equation: equation + operate,\n                            currentVal: operate\n                        })\n                    }\n                    else if(operate !== \"-\"){\n                        while(endsWithOperator.test(prevVal)){\n                            prevVal = prevVal.slice(0, prevVal.length - 1)\n                        }\n                        this.setState({\n                            equation: prevVal + operate,\n                            currentVal: operate\n                        })\n                    }\n                }\n            }\n            console.log(currentVal)\n        }\n    } //HandleOperators\n\n    handleDecimal(e){\n        const {currentVal, equation, solved} = this.state;\n        let val = e.target.value \n        if(solved){\n            this.setState({\n                currentVal: \"0.\", \n                equation: \"0.\",\n                solved: false\n            });\n        }\n        if(!currentVal.includes(val) && !endsWithOperator.test(equation)){\n            this.setState({\n                currentVal: currentVal + val,\n                equation: equation + val\n            })\n        }\n    } //HandleDecimal\n\n    initialize(){\n        this.setState({\n            currentVal: \"0\",\n            prevVal: \"0\", \n            equation: \"\"\n        })\n    } //Initialize\n\n\n    render () {\n        return (\n            <div className=\"container\">\n                <Header />\n                <main className=\"calculator\">\n                    <EquationScreen equation={this.state.equation}/>\n                    <ResultScreen currentValue={this.state.currentVal}/>\n                    <Keypad \n                        decimal={this.handleDecimal}\n                        equal={this.handleEqual}\n                        init={this.initialize}\n                        numbers={this.handleNumbers}\n                        oper={this.handleOperators}\n                        />\n                </main>\n                <Footer />\n            </div>\n        );\n    }\n}\n\n\n\n\nclass ResultScreen extends React.Component {\n    render(){\n        return (\n            <div className = \"result-screen\"\n            id=\"display\">\n                {this.props.currentValue}\n            </div>\n        );\n    }\n}\nclass EquationScreen extends React.Component {\n    render() {\n        return ( <div className=\"equation-screen\">\n            {this.props.equation}\n        </div>\n        );\n    }\n}\n\n\nexport default Calculator;","import React from 'react';\n\nexport const Header = () => ( \n    <div className=\"header-container\">\n        <h1 className=\"header-title\">Rebel-Cow React JS Calculator</h1>\n    </div>\n    \n);","import React from 'react';\n\nexport const Footer = () => ( \n    <footer className = \"footer\">\n        <p> React JS Calculator App created by {\" \"}<a href=\"https://github.com/TLanetteRose\">{\" \"} <span> T.Lanette Pollard </span></a> &nbsp;\n        FreeCodeCamp Front End Libraries Project </p>\n    </footer>\n);","import React from 'react';\n\nconst keypadRow = (props) => (\n    <div className=\"keypad__row\">\n        {props.children}\n    </div>\n);\n\nexport default keypadRow;","import React from 'react';\n\nconst largeButton = (props) => \n    <button type=\"large\" {...props} />;\n\nexport default largeButton;","import React from 'react';\n\nimport KeypadRow from './KeypadRow/KeypadRow';\nimport LargeButton from '../../../components/LargeButton/LargeButton';\n\nclass Keypad extends React.Component  {\n    render(){\n    return (\n        <section className=\"keypad\"> \n            {/* row #1 */ } \n            <KeypadRow>\n                <button id=\"seven\"\n                className=\"btn\"\n                    onClick={this.props.numbers} value=\"7\">7</button> \n                <button id=\"eight\" className=\"btn\"\n                    onClick={this.props.numbers} value=\"8\">8</button> \n                <button id=\"nine\" className=\"btn\"\n                     onClick={this.props.numbers} value=\"9\"> 9 </button> \n                <button id=\"add\" className=\"btn\"\n                    type=\"operator\"\n                    onClick={this.props.oper} value=\"+\"> + </button> \n            </KeypadRow> \n            {/* row #2 */ } \n            <KeypadRow>\n                <button id=\"four\" className=\"btn\"\n                    onClick={this.props.numbers} value=\"4\">4</button> \n                <button id=\"five\" className=\"btn\"\n                    onClick={this.props.numbers} value=\"5\">5</button> \n                <button id=\"six\" className=\"btn\"\n                    onClick={this.props.numbers} value=\"6\">6</button> \n                <button id=\"subtract\" className=\"btn\" type=\"operator\"\n                    onClick={this.props.oper} value=\"-\"> - </button> \n            </KeypadRow> \n            {/* row #3 */ } \n            <KeypadRow>\n                <button id=\"one\" className=\"btn\"\n                    onClick={this.props.numbers} value=\"1\">1</button> \n                <button id=\"two\" className=\"btn\"\n                    onClick={this.props.numbers} value=\"2\">2</button> \n                <button id=\"three\" className=\"btn\"\n                     onClick={this.props.numbers} value=\"3\">3</button> \n                <button id=\"multiply\" className=\"btn\" type=\"operator\"\n                     onClick={this.props.oper} value=\"*\">*</button> \n            </KeypadRow> \n            {/* row #4 */ } \n            <KeypadRow>\n                <button id=\"zero\" className=\"btn\"\n                    onClick={this.props.numbers} value=\"0\">0</button> \n                <button id=\"decimal\" className=\"btn\"\n                    onClick={this.props.decimal} value=\".\">.</button> \n                <button id=\"equals\" className=\"btn\"\n                    onClick={this.props.equal} value=\"=\">=</button> \n                <button id=\"divide\" className=\"btn\"\n                    onClick={this.props.oper} value=\"/\">/</button> \n            </KeypadRow> \n            {/* row #5 */ } \n            <KeypadRow>\n                <LargeButton id=\"clear\" className=\"btn--large\"\n                    onClick={this.props.init} value=\"C\">C \n                    </LargeButton> \n            </KeypadRow> \n        </section>\n\n        );\n    }\n}\n    \n\n\nexport default Keypad;","import React from 'react';\n\nimport './styles/styles.css';\nimport Calculator from './layout/Calculator/Calculator';\n\n\n\nconst app = () => (\n  <div className=\"app\">\n    <Calculator />\n  </div>\n);\n\n\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}